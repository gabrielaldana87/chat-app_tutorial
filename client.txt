We will be writing a client file using js to be able to communicate with the server.

In order to communicate with the server, we will need a few basic functonalities.

Opening connection
Sending messages
Handling when messages come in

We will have to reference websockets within our client file, which we do so by introducing the following two lines.

As will be discussed in the server.js file; our client JavaScript file (which we will reference as client.js)
needs to first connect to the server.

First our client.js file needs to handle the event of opening a connection with the server.

 ws.on("open",function()
{
  console.log("Connected to server.");
});

As our connection is realized, we console.log a message indicating this connection.

We can likewise broadcast to our server that we have established a connection.

We do so by using the ws.send method.

var ws = new WebSocket("ws://localhost:3000");

ws.on("open",function()
{
  console.log("Connected to server.");
  ws.send("client connected!");
});

Our last event-handler will listen for messages being emitted from the server.

We do so by introducing ws.on("message")

This eventListener should console.log data emitted from the server.

ws.on("message", function(data)
{
  console.log(data);
})

Our completed client.js should look as follows:

var ws = new WebSocket("ws://localhost:3000");

ws.on("open",function()
{
  console.log("Connected to server.");
  ws.send("client connected!");
});

ws.on("message", function(data)
{
  console.log(data);
})


Hosting your app locally:

Now that you have created both a client.js file and a server.js, you can start communicating with other clients.

As an example of the chat app capabilities of integrating wscat in your website, now that you have both server and client
files, you can test locally.

We do so by running the following command on your terminal:


In a new terminal window type in the following command to run your client.

Open a second terminal window and open up another client.

Start chatting with your clients!

Creating a git repository for your work:

In your github page, create a new repository by right hand-clicking "new repository" on the drop-down box next to your name.

Name your new repository and include a description.

Click "Submit" and follow the instructions indicated on github to push up your repository to github.
